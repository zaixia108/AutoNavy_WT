from typing import List, Tuple, Optional
import numpy as np

class vec:
    """二维向量类"""

    def __init__(self, x: int, y: int) -> None: ...
    def __eq__(self, other: 'vec') -> bool: ...

class Point:
    """坐标点类"""

    def __init__(self, x: int, y: int) -> None: ...
    def __eq__(self, other: 'Point') -> bool: ...

class MapGrid:
    """地图数据类"""

    def __init__(self, height: int, width: int) -> None: ...
    def set_grid(self, x: int, y: int, type: str) -> None: ...

class Jps:
    """JPS算法类"""

    def __init__(self, start_point: Point, end_point: Point, map: MapGrid) -> None: ...

    class Vertex:
        """图中顶点类"""

        def __init__(self, point: Point, endpoint: Point, g: float) -> None: ...
        def neibor(self, horizontal: int, vertical: int) -> 'Jps.Vertex': ...
        def get_direction(self) -> vec: ...

    def search_next(self, Vertex: 'Jps.Vertex', horizontal: int, vertical: int) -> Optional['Jps.Vertex']: ...
    def direction(self, x1: int, x2: int) -> int: ...
    def Process(self) -> Tuple[Optional[List['Jps.Vertex']], Optional[List[Tuple[int, int]]], Optional[List[Tuple[int, int]]]]: ...
    def min_cost_Vertex(self) -> Optional['Jps.Vertex']: ...
    def is_open(self, Vertex: 'Jps.Vertex') -> Optional['Jps.Vertex']: ...
    def is_closed(self, Vertex: 'Jps.Vertex') -> int: ...
    def close(self, Vertex: 'Jps.Vertex') -> None: ...
    def is_obstacle(self, Vertex: 'Jps.Vertex') -> int: ...
    def is_end(self, Vertex: 'Jps.Vertex') -> bool: ...
    def prune_and_jump(self, Vertex: 'Jps.Vertex') -> int: ...
    def jump_node(self, now: 'Jps.Vertex', pre: 'Jps.Vertex') -> Optional['Jps.Vertex']: ...